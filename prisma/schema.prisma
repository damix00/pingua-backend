// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum Plan {
  FREE
  // BASIC
  PREMIUM
  // ULTRA
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  username         String    @unique
  avatar           String?
  name             String
  xp               Int       @default(0)
  plan             Plan      @default(FREE)
  planExpiresAt    DateTime?
  subscriptionId   String?
  resetToken       String    @default(uuid())
  createdAt        DateTime  @default(now())

  // Fields for daily streak tracking
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastStreakUpdate DateTime?
  freeScenariosStarted Int       @default(0) // Number of free scenarios used

  courses          Course[]
  aiConversations  AIConversation[]
  aiScenarios      AIScenario[]
}

// Auth

enum VerificationStatus {
  PENDING
  VERIFIED
  CREATING // creating means that this verification code is being used to create a new user
}

model VerificationCode {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  ip        String?
  code      String        @unique
  email     String
  status    VerificationStatus
  createdAt DateTime      @default(now())
  expiresAt DateTime
}

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  languageCode String // The language code of the course
  appLanguageCode String // The language code of the app, so we can show the course in the user's language
  xp Int
  level Int
  fluencyLevel Int
  // In case we update the course, we can increment the version
  // The user will still be on the old version, but new users will get the new version
  version Int @default(1)
  
  user User @relation(fields: [userId], references: [id])
  sections Section[]
  aiScenarios AIScenario[]
}

model Section {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId
  finished Boolean // Index this so we can quickly get the unfinished section
  level Int
  accessible Boolean

  course Course @relation(fields: [courseId], references: [id])
  questions UnitQuestions[]
  stories UnitStory[]
  
  @@index([finished])
}

model UnitQuestions {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sectionId String @db.ObjectId
  xp Int
  completed Boolean
  level Int
  fluencyLevel Int
  data Json
  createdAt DateTime @default(now())

  section Section @relation(fields: [sectionId], references: [id])
}

// When a user completes a story, we will store it here
model UnitStory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sectionId String @db.ObjectId
  xp Int
  completed Boolean
  level Int
  fluencyLevel Int
  data Json
  createdAt DateTime @default(now())

  section Section @relation(fields: [sectionId], references: [id])
}

// AI will extract information from the conversation and store it here
// This is because it's not possible to fit the entire conversation in the prompt
// Plus, this will make it feel more like a real conversation
model Memory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  text String
  expiresAt DateTime
  createdAt DateTime @default(now())

  conversation AIConversation @relation(fields: [conversationId], references: [id])
}

model AIConversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  character String
  lastMessageTime DateTime?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  messages AIConversationMessage[]
  memories Memory[]

  @@index([character])
}

enum AttachmentType {
  VOICE
  IMAGE
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  messageId String @db.ObjectId
  url String
  type AttachmentType
  createdAt DateTime @default(now())

  message AIConversationMessage @relation(fields: [messageId], references: [id])
}

model AIConversationMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  userMessage Boolean // If the user sent the message, or the AI
  content String
  read Boolean @default(false)

  createdAt DateTime @default(now())

  conversation AIConversation @relation(fields: [conversationId], references: [id])
  attachments Attachment[]
}

model AIScenario {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cmsId String @unique
  userId String @db.ObjectId
  courseId String @db.ObjectId
  completed Boolean @default(false) // Whether the scenario has been completed
  success Boolean @default(false) // Whether the user has successfully completed the scenario
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  messages AIScenarioMessage[]
}

model AIScenarioMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  scenarioId String @db.ObjectId
  userMessage Boolean
  content String

  createdAt DateTime @default(now())

  scenario AIScenario @relation(fields: [scenarioId], references: [id])
}
